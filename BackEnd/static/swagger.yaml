openapi: 3.0.0
info:
  title: MoveHive - API
  version: 1.0.0
  description: API para gerenciar usuários e esportes na aplicação MoveHive.


tags:
  - name: Usuário
    description: Operações relacionadas a usuários
  - name: Esporte
    description: Operações relacionadas a esportes
  - name: Eventos
    description: Operações relacionadas a eventos
  - name: Posts
    description: Operações relacionadas a Posts
  - name: Treino
    description: Operações relacionadas a Treino


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

# USUARIOS
paths:


  # REGISTRAR
  /usuario/RegistrarUsuario:
    post:
      tags:
        - Usuário
      summary: Registrar novo usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                NomeCompleto:
                  type: string
                  example: "João da Silva"
                username:
                  type: string
                  example: "joaosilva"
                data_nascimento:
                  type: string
                  format: date
                  example: "2000-05-15"
                email:
                  type: string
                  format: email
                  example: "joao@example.com"
                senha:
                  type: string
                  format: password
                  example: "senhaSegura123"
              required:
                - NomeCompleto
                - username
                - data_nascimento
                - email
                - senha
      responses:
        '201':
          description: Usuário registrado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Erro na requisição (campos inválidos ou obrigatórios não fornecidos)
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Campos obrigatórios ausentes"


  # LOGAR
  /usuario/LoginUsuario:
    post:
      summary: Realiza login de usuário
      description: Autentica o usuário através de email e senha. Retorna um token JWT em caso de sucesso.
      tags:
        - Usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: usuario@email.com
                  description: Email do usuário cadastrado
                senha:
                  type: string
                  example: "senha123"
                  description: Senha do usuário
              required:
                - email
                - senha
      responses:
        '200':
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    description: Token JWT para autenticação
        '400':
          description: Erro de validação - campos obrigatórios ausentes
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Campos 'email' e 'senha' são obrigatórios"
        '401':
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Senha incorreta"
        '404':
          description: E-mail não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "E-mail não encontrado"



  /usuario/DadosModal:
    post:
      tags:
        - Usuário
      summary: Adiciona ou atualiza dados do perfil do usuário
      description: Adiciona informações no perfil do usuário autenticado, como biografia, cidade, estado e esportes praticados.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                biografia:
                  type: string
                  example: "Amo tecnologia e futebol."
                cidade:
                  type: string
                  example: São Paulo
                estado:
                  type: string
                  example: SP
                esportes_praticados:
                  type: object
                  additionalProperties:
                    type: string
                  example:
                    futebol: iniciante
                    basquete: amador
              required:
                - esportes_praticados
      responses:
        '200':
          description: Informações adicionadas com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: sucesso
                  mensagem:
                    type: string
                    example: Informações adicionadas com sucesso
        '400':
          description: Nenhum dado fornecido
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: Nenhum dado fornecido
        '401':
          description: Token JWT ausente ou inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: Token inválido ou ausente
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: Usuário não encontrado
        '500':
          description: Erro interno no servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: Erro inesperado no servidor

  # LISTAR USER
  /usuario/ListarUsuarios:
    get:
      tags:
        - Usuário
      summary: Listar todos os usuários
      responses:
        '200':
          description: Lista de usuários retornada com sucesso
        '500':
          description: Erro interno ao listar usuários

  # EXCLUIR USER
  /usuario/ExcluirUsuario/{usuario_id}:
    delete:
      tags:
        - Usuário
      summary: Excluir usuário por ID
      parameters:
        - name: usuario_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuário excluído com sucesso
        '404':
          description: Usuário não encontrado


  # EDITAR USER
  /usuario/EditarUsuario/{usuario_id}:
    put:
      tags:
        - Usuário
      summary: Editar dados do usuário
      parameters:
        - name: usuario_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nome:
                  type: string
                email:
                  type: string
                senha:
                  type: string
                esporte_id:
                  type: string
                estado:
                  type: string
      responses:
        '200':
          description: Usuário editado com sucesso
        '400':
          description: Nenhum dado fornecido para atualização


# Esporte
  /esportes/AdicionarEsporte:
    post:
      tags:
        - Esporte
      summary: Adicionar novo esporte
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nome:
                  type: string
                descricao:
                  type: string
              required:
                - nome
                - descricao
      responses:
        '200':
          description: Esporte adicionado com sucesso
        '400':
          description: Campos obrigatórios não fornecidos ou erro na requisição

  /esportes/ListarEsportes:
    get:
      tags:
        - Esporte
      summary: Listar todos os esportes
      responses:
        '200':
          description: Lista de esportes retornada com sucesso
        '500':
          description: Erro interno ao listar esportes

  /esportes/AtualizarEsporte/{esporte_id}:
    put:
      tags:
        - Esporte
      summary: Atualizar informações de um esporte
      parameters:
        - name: esporte_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nome:
                  type: string
                descricao:
                  type: string
      responses:
        '200':
          description: Esporte atualizado com sucesso
        '400':
          description: Nenhum dado fornecido para atualização

  /esportes/ExcluirEsporte/{esporte_id}:
    delete:
      tags:
        - Esporte
      summary: Excluir esporte por ID
      parameters:
        - name: esporte_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Esporte excluído com sucesso
        '404':
          description: Esporte não encontrado


# Eventos
  /eventos/AdicionarEvento:
    post:
      tags:
        - Eventos
      summary: Adicionar um novo evento
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - esporte_id
                - nome
                - localizacao
                - data_hora
                - descricao
                - max_participantes
                - nivel_esporte
                - tipo_evento
              properties:
                usuario_id:
                  type: string
                esporte_id:
                  type: string
                nome:
                  type: string
                localizacao:
                  type: string
                data_hora:
                  type: string
                  format: date-time
                descricao:
                  type: string
                max_participantes:
                  type: integer
                nivel_esporte:
                  type: string
                tipo_evento:
                  type: string
                link_oficial:
                  type: string
      responses:
        '200':
          description: Evento adicionado com sucesso
        '400':
          description: Erro na requisição
          


  /eventos/ListarEvento:
    get:
      tags:
        - Eventos
      summary: Listar todos os eventos
      responses:
        '200':
          description: Lista de eventos
        '500':
          description: Erro interno ao listar eventos

  /eventos/BuscarEventoID/{evento_id}:
    get:
      tags:
        - Eventos
      summary: Buscar evento por ID
      parameters:
        - name: evento_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Evento encontrado
        '404':
          description: Evento não encontrado

  /eventos/AtualizarEvento/{evento_id}:
    put:
      tags:
        - Eventos
      summary: Atualizar um evento existente
      parameters:
        - name: evento_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                esporte_id:
                  type: string
                nome:
                  type: string
                localizacao:
                  type: string
                data_hora:
                  type: string
                  format: date-time
                descricao:
                  type: string
                max_participantes:
                  type: integer
                status_evento:
                  type: string
                nivel_esporte:
                  type: string
                link_oficial:
                  type: string
                tipo_evento:
                  type: string
                inscricoes_ativas:
                  type: boolean
                participantes:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Evento atualizado com sucesso
        '400':
          description: Erro na atualização do evento

  /eventos/ExcluirEventoID/{evento_id}:
    delete:
      tags:
        - Eventos
      summary: Excluir um evento por ID
      parameters:
        - name: evento_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Evento excluído com sucesso
        '404':
          description: Evento não encontrado


# Posts 

  /postagem/ListarPostagens:
    get:
      summary: Listar postagens do usuário autenticado
      description: Retorna todas as postagens criadas pelo usuário autenticado via JWT.
      tags:
        - Posts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de postagens retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    descricao:
                      type: string
                      example: "Minha primeira postagem"
                    imagem_url:
                      type: string
                      example: "https://exemplo.com/imagem1.jpg"
        '401':
          description: Não autorizado - Token JWT ausente ou inválido
        '500':
          description: Erro interno do servidor


  /postagem/FeedSemFiltro:
    get:
      summary: Obter feed público de postagens (sem filtro)
      description: >
        Retorna as 10 postagens públicas mais recentes, ordenadas por data de criação em ordem decrescente.
        Cada item da resposta contém os dados da postagem e as informações básicas do usuário autor.
      tags:
        - Posts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de postagens retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    postagem:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "abc123"
                        descricao:
                          type: string
                          example: "Hoje foi um ótimo dia para jogar futebol!"
                        imagem_url:
                          type: string
                          example: "https://exemplo.com/imagem.jpg"
                        data_criacao:
                          type: string
                          format: date-time
                          example: "2025-06-09T14:23:00Z"
                        usuario_id:
                          type: string
                          example: "user456"
                    usuario:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "user456"
                        nome:
                          type: string
                          example: "João Silva"
                        username:
                          type: string
                          example: "joaosilva99"
                        foto_perfil:
                          type: string
                          example: "https://exemplo.com/foto.jpg"
        '401':
          description: Não autorizado - Token JWT ausente ou inválido
        '500':
          description: Erro interno do servidor


  /postagem/CriarPostagem:
    post:
      summary: Criar uma nova postagem
      description: Endpoint para criar uma nova postagem com descrição e imagem.
      tags:
        - Posts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                descricao:
                  type: string
                  description: Descrição da postagem
                imagem:
                  type: string
                  format: binary
                  description: Imagem da postagem
              required:
                - descricao
                - imagem
      responses:
        '201':
          description: Postagem criada com sucesso
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 123
                  descricao: "Exemplo de descrição"
                  imagem_url: "https://exemplo.com/imagem.jpg"
        '400':
          description: Requisição inválida
        '401':
          description: Não autorizado - Token JWT ausente ou inválido
        '500':
          description: Erro interno do servidor


  /postagem/EditarPostagem:
    put:
      summary: Editar uma postagem existente
      description: Edita os dados (descrição e/ou imagem) de uma postagem do usuário autenticado.
      tags:
        - Posts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                post_id:
                  type: string
                  description: ID da postagem a ser editada
                descricao:
                  type: string
                  description: Nova descrição da postagem (opcional)
                imagem:
                  type: string
                  format: binary
                  description: Nova imagem da postagem (opcional)
              required:
                - post_id
      responses:
        '200':
          description: Postagem editada com sucesso
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  descricao: "Descrição atualizada"
                  imagem_url: "https://exemplo.com/nova-imagem.jpg"
        '400':
          description: Requisição inválida - post_id não fornecido
        '401':
          description: Não autorizado - Token JWT ausente ou inválido
        '404':
          description: Postagem não encontrada
        '500':
          description: Erro interno do servidor   
          
               
  /postagem/ExcluirPostagem:
    delete:
      summary: Excluir uma postagem
      description: Exclui uma postagem do usuário autenticado com base no ID fornecido.
      tags:
        - Posts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postagem_id:
                  type: integer
                  description: ID da postagem a ser excluída
              required:
                - postagem_id
      responses:
        '200':
          description: Postagem excluída com sucesso
          content:
            application/json:
              schema:
                type: object
                example:
                  mensagem: "Postagem excluída com sucesso."
        '400':
          description: Requisição inválida - ID da postagem não fornecido
        '401':
          description: Não autorizado - Token JWT ausente ou inválido
        '404':
          description: Postagem não encontrada
        '500':
          description: Erro interno do servidor


# Treinos
  /treino/AdicionarTreino:
    post:
      tags:
        - Treino
      summary: Adiciona um novo treino
      description: Endpoint para criar um novo treino com informações como título, descrição, esporte, data, lugar, tempo treinado e uma imagem opcional. É necessário fornecer o token JWT no cabeçalho Authorization.
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                titulo:
                  type: string
                  description: Título do treino
                  example: Corrida Matinal
                descricao:
                  type: string
                  description: Descrição do treino
                  example: Corrida leve no parque
                nome_esporte:
                  type: string
                  description: Nome do esporte relacionado
                  example: Corrida
                data_hora_str:
                  type: string
                  description: Data e hora do treino no formato YYYY-MM-DD HH:MM
                  example: "2025-06-05 07:30"
                lugar:
                  type: string
                  description: Local onde o treino foi realizado
                  example: Parque Ibirapuera
                tempo_treinado:
                  type: number
                  description: Tempo treinado em horas
                  example: 1.5
                arquivo_imagem:
                  type: string
                  format: binary
                  description: Imagem opcional do treino
      responses:
        '200':
          description: Treino criado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: ID do treino
                    example: "12345"
                  titulo:
                    type: string
                  descricao:
                    type: string
                  nome_esporte:
                    type: string
                  data_hora:
                    type: string
                    format: date-time
                  lugar:
                    type: string
                  tempo_treinado:
                    type: number
                  imagem_url:
                    type: string
                    description: URL da imagem (se enviada)
        '400':
          description: Erro de validação dos dados
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Todos os campos obrigatórios devem ser preenchidos."
  

  /treino/ListarTreino:
    get:
      tags:
        - Treino
      summary: Lista treinos do usuário autenticado
      description: Retorna todos os treinos cadastrados para o usuário autenticado. É necessário fornecer o token JWT no cabeçalho Authorization.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de treinos retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: ID do treino
                      example: "12345"
                    titulo:
                      type: string
                      example: Corrida Matinal
                    descricao:
                      type: string
                      example: Corrida leve no parque
                    nome_esporte:
                      type: string
                      example: Corrida
                    data_hora:
                      type: string
                      format: date-time
                      example: "2025-06-05 07:30"
                    lugar:
                      type: string
                      example: Parque Ibirapuera
                    tempo_treinado:
                      type: number
                      example: 1.5
                    imagem_url:
                      type: string
                      description: URL da imagem associada (se houver)
                      example: "https://site.com/imagem123.jpg"
        '401':
          description: Não autorizado — token JWT inválido, expirado ou ausente
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Token inválido ou não fornecido"


  /treino/ExcluirTreino:
    delete:
      tags:
        - Treino
      summary: Exclui um treino do usuário
      description: Exclui um treino específico do usuário autenticado, com base no treino_id fornecido no corpo da requisição. É necessário fornecer o token JWT no cabeçalho Authorization.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                treino_id:
                  type: string
                  description: ID do treino a ser excluído
                  example: "12345"
              required:
                - treino_id
      responses:
        '200':
          description: Treino excluído com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensagem:
                    type: string
                    example: "Treino excluído com sucesso."
        '400':
          description: Erro na requisição — campo obrigatório ausente
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "O campo 'treino_id' é obrigatório."
        '401':
          description: Não autorizado — token JWT inválido, expirado ou ausente
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Token inválido ou não fornecido"


  /treino/AtualizarTreino:
    put:
      tags:
        - Treino
      summary: Atualiza um treino existente
      description: Atualiza os dados de um treino do usuário autenticado. Todos os campos são opcionais, exceto o treino_id, que é obrigatório. A imagem pode ser atualizada enviando um arquivo.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                treino_id:
                  type: string
                  description: ID do treino a ser atualizado
                  example: "12345"
                titulo:
                  type: string
                  description: Novo título do treino
                  example: Corrida Noturna
                descricao:
                  type: string
                  description: Nova descrição do treino
                  example: Corrida leve à noite
                nome_esporte:
                  type: string
                  description: Nome do esporte
                  example: Corrida
                data_hora_str:
                  type: string
                  description: Nova data e hora do treino (YYYY-MM-DD HH:MM)
                  example: "2025-06-05 20:00"
                lugar:
                  type: string
                  description: Novo local do treino
                  example: Parque da Cidade
                tempo_treinado:
                  type: number
                  description: Novo tempo treinado em horas
                  example: 1.2
                arquivo_imagem:
                  type: string
                  format: binary
                  description: Nova imagem do treino (opcional)
              required:
                - treino_id
      responses:
        '200':
          description: Treino atualizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensagem:
                    type: string
                    example: "Treino atualizado com sucesso."
                  treino:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "12345"
                      titulo:
                        type: string
                        example: Corrida Noturna
                      descricao:
                        type: string
                        example: Corrida leve à noite
                      nome_esporte:
                        type: string
                        example: Corrida
                      data_hora:
                        type: string
                        format: date-time
                        example: "2025-06-05 20:00"
                      lugar:
                        type: string
                        example: Parque da Cidade
                      tempo_treinado:
                        type: number
                        example: 1.2
                      imagem_url:
                        type: string
                        example: "https://site.com/imagem123.jpg"
        '400':
          description: Erro na requisição — treino_id ausente
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "O campo 'treino_id' é obrigatório."
        '401':
          description: Não autorizado — token JWT inválido, expirado ou ausente
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Token inválido ou não fornecido"