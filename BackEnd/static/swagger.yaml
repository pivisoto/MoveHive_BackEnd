openapi: 3.0.0
info:
  title: MoveHive - API
  version: 1.0.0
  description: API para gerenciar usuários e esportes na aplicação MoveHive.


tags:
  - name: Usuário
    description: Operações relacionadas a usuários
  - name: Esporte
    description: Operações relacionadas a esportes
  - name: Eventos
    description: Operações relacionadas a eventos
  - name: Posts
    description: Operações relacionadas a Posts
  - name: Treino
    description: Operações relacionadas a Treino
  - name: Notificao
    description: Operações relacionadas a Notificações


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT


paths:

# Usuarios
  /usuario/RegistrarUsuario:
    post:
      tags:
        - Usuário
      summary: Registrar novo usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                NomeCompleto:
                  type: string
                  example: "João da Silva"
                username:
                  type: string
                  example: "joaosilva"
                data_nascimento:
                  type: string
                  format: date
                  example: "2000-05-15"
                email:
                  type: string
                  format: email
                  example: "joao@example.com"
                senha:
                  type: string
                  format: password
                  example: "senhaSegura123"
              required:
                - NomeCompleto
                - username
                - data_nascimento
                - email
                - senha
      responses:
        '201':
          description: Usuário registrado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Erro na requisição (campos inválidos ou obrigatórios não fornecidos)
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Campos obrigatórios ausentes"
 
  /usuario/LoginUsuario:
    post:
      summary: Realiza login de usuário
      description: Autentica o usuário através de email e senha. Retorna um token JWT em caso de sucesso.
      tags:
        - Usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: usuario@email.com
                  description: Email do usuário cadastrado
                senha:
                  type: string
                  example: "senha123"
                  description: Senha do usuário
              required:
                - email
                - senha
      responses:
        '200':
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    description: Token JWT para autenticação
        '400':
          description: Erro de validação - campos obrigatórios ausentes
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Campos 'email' e 'senha' são obrigatórios"
        '401':
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Senha incorreta"
        '404':
          description: E-mail não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "E-mail não encontrado"

  /usuario/DadosModal:
    post:
      tags:
        - Usuário
      summary: Adiciona ou atualiza dados do perfil do usuário
      description: Adiciona ou atualiza informações no perfil do usuário autenticado, como foto, biografia, cidade, estado e esportes praticados. Esta rota espera um multipart/form-data.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                foto:
                  type: string
                  format: binary
                  description: "Arquivo de imagem para a foto de perfil do usuário (opcional)."
                dados:
                  type: string
                  description: "Uma string JSON contendo os dados textuais a serem atualizados."
                  example: '{
                    "biografia": "Amo tecnologia e futebol.",
                    "cidade": "São Paulo",
                    "estado": "SP",
                    "esportes_praticados": {
                      "futebol": "iniciante",
                      "basquete": "amador"
                    }
                  }'
      responses:
        '200':
          description: Informações atualizadas com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: sucesso
                  mensagem:
                    type: string
                    example: Informações atualizadas com sucesso
        '400':
          description: Nenhum dado fornecido
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: Nenhum dado fornecido
        '401':
          description: Token JWT ausente ou inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: Token inválido ou ausente
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: Usuário não encontrado
        '500':
          description: Erro interno no servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: Erro inesperado no servidor

  /usuario/follow:
    post:
      summary: Seguir um usuário
      description: Permite que um usuário autenticado siga outro usuário, adicionando o ID do usuário seguido na lista de "seguindo" e o ID do seguidor na lista de "seguidores".
      tags:
        - Usuário
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                seguido_id:
                  type: string
                  example: "abc123"
                  description: ID do usuário que será seguido.
              required:
                - seguido_id
      responses:
        '200':
          description: Usuário seguido com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensagem:
                    type: string
                    example: "Usuário seguido com sucesso!"
        '400':
          description: Requisição inválida (ID ausente ou tentativa de seguir a si mesmo).
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Você não pode seguir a si mesmo"
        '404':
          description: Usuário(s) não encontrado(s).
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Usuário(s) não encontrado(s)"
        '500':
          description: Erro interno no servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Descrição do erro interno"

  /usuario/unfollow:
    post:
      summary: Deixar de seguir um usuário
      description: Remove a relação de "seguindo" e "seguidores" entre o usuário autenticado e o usuário informado.
      tags:
        - Usuário
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                seguido_id:
                  type: string
                  example: "abc123"
                  description: ID do usuário que será deixado de seguir.
              required:
                - seguido_id
      responses:
        '200':
          description: Usuário deixado de seguir com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensagem:
                    type: string
                    example: "Usuário deixado de seguir com sucesso!"
        '400':
          description: Requisição inválida (ID ausente ou tentativa de deixar de seguir a si mesmo).
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Você não pode deixar de seguir a si mesmo"
        '404':
          description: Usuário(s) não encontrado(s).
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Usuário(s) não encontrado(s)"
        '500':
          description: Erro interno no servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Descrição do erro interno"

  /usuario/usuariosSemFiltro:
    get:
      summary: Listar usuários sugeridos (sem filtro)
      description: Retorna todos os usuários que o usuário autenticado ainda não segue.
      tags:
        - Usuário
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de usuários sugeridos.
          content:
            application/json:
              schema:
                type: object
                properties:
                  usuarios:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "abc123"
                        username:
                          type: string
                          example: "joao_silva"
                        nome_completo:
                          type: string
                          example: "João da Silva"
                        foto_perfil:
                          type: string
                          example: "https://example.com/foto.jpg"
                        biografia:
                          type: string
                          example: "Apaixonado por futebol e corridas"
                        cidade:
                          type: string
                          example: "São Paulo"
                        estado:
                          type: string
                          example: "SP"
                        esportes_praticados:
                          type: object
                          example:
                            futebol: iniciante
                            corrida: profissional
        '404':
          description: Usuário autenticado não encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Usuário autenticado não encontrado"
        '500':
          description: Erro interno no servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Descrição do erro interno"

  /usuario/usuariosComFiltro:
    get:
      summary: Listar usuários sugeridos (com filtro)
      description: >
        Retorna usuários sugeridos com base nos critérios: <br>
        - Cidade igual à do usuário autenticado. <br>
        - Estado igual ao do usuário autenticado. <br>
        - Pelo menos um esporte em comum.   <br> <br>

        Caso nenhum usuário seja encontrado: <br>
        1. Relaxa os critérios, permitindo mais resultados.   <br>
        2. Retorna usuários aleatórios como último recurso. <br>
      tags:
        - Usuário
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de usuários sugeridos.
          content:
            application/json:
              schema:
                type: object
                properties:
                  usuarios:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "abc123"
                        username:
                          type: string
                          example: "maria_oliveira"
                        nome_completo:
                          type: string
                          example: "Maria Oliveira"
                        foto_perfil:
                          type: string
                          example: "https://example.com/foto.jpg"
                        biografia:
                          type: string
                          example: "Corredora amadora e apaixonada por vôlei"
                        cidade:
                          type: string
                          example: "Rio de Janeiro"
                        estado:
                          type: string
                          example: "RJ"
                        esportes_praticados:
                          type: object
                          example:
                            futebol: iniciante
                            voleibol: amador
                            corrida: profissional
        '404':
          description: Usuário autenticado não encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Usuário autenticado não encontrado"
        '500':
          description: Erro interno no servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Descrição do erro interno"

  /usuario/usuariosSeguidos:
    get:
      summary: Listar usuários seguidos
      description: Retorna todos os usuários que o usuário autenticado segue atualmente.
      tags:
        - Usuário
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de usuários seguidos.
          content:
            application/json:
              schema:
                type: object
                properties:
                  usuarios_seguindo:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "abc123"
                        username:
                          type: string
                          example: "joao_silva"
                        nome_completo:
                          type: string
                          example: "João da Silva"
                        foto_perfil:
                          type: string
                          example: "https://example.com/foto.jpg"
                        biografia:
                          type: string
                          example: "Apaixonado por futebol e corridas"
                        cidade:
                          type: string
                          example: "São Paulo"
                        estado:
                          type: string
                          example: "SP"
                        esportes_praticados:
                          type: object
                          example:
                            futebol: amador
                            corrida: amador
        '404':
          description: Usuário autenticado não encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Usuário autenticado não encontrado"
        '500':
          description: Erro interno no servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Descrição do erro interno"

  /usuario/usuariosSeguidores:
   get:
      summary: Listar seguidores do usuário autenticado
      description: Retorna todos os usuários que seguem o usuário atualmente autenticado.
      tags:
        - Usuário
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de seguidores.
          content:
            application/json:
              schema:
                type: object
                properties:
                  seguidores:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "def456"
                        username:
                          type: string
                          example: "maria_souza"
                        nome_completo:
                          type: string
                          example: "Maria Souza"
                        foto_perfil:
                          type: string
                          example: "https://example.com/foto_maria.jpg"
                        biografia:
                          type: string
                          example: "Amante de basquete e natação"
                        cidade:
                          type: string
                          example: "Rio de Janeiro"
                        estado:
                          type: string
                          example: "RJ"
                        esportes_praticados:
                          type: object
                          example:
                            basquete: amador
                            natação: profissional
        '404':
          description: Usuário autenticado não encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Usuário autenticado não encontrado"
        '500':
          description: Erro interno no servidor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Descrição do erro interno"

  /usuario/rankingTodos:
    get:
      summary: Lista o ranking de usuários
      description: Retorna a lista de usuários com pontos maiores que zero, ordenados do maior para o menor.
      tags:
        - Usuário
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de usuários no ranking
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    nome_completo:
                      type: string
                      example: João Silva
                    username:
                      type: string
                      example: joaosilva
                    pontos:
                      type: integer
                      example: 120
                    foto_perfil:
                      type: string
                      format: uri
                      example: https://exemplo.com/imagem.jpg
        '401':
          description: Token de autenticação inválido ou ausente
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: Token inválido ou ausente.
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: Erro inesperado no servidor.
  
  /usuario/rankingSeguindo:
    get:
      summary: Lista o ranking dos usuários seguidos
      description: >
        Retorna a lista de usuários que o usuário autenticado está seguindo, incluindo ele próprio,
        ordenados do maior para o menor número de pontos.
      tags:
        - Usuário
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de usuários no ranking dos seguidos
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    nome_completo:
                      type: string
                      example: Maria Oliveira
                    username:
                      type: string
                      example: mariaoliveira
                    pontos:
                      type: integer
                      example: 95
                    foto_perfil:
                      type: string
                      format: uri
                      example: https://exemplo.com/imagem_maria.jpg
        '401':
          description: Token de autenticação inválido ou ausente
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: Token inválido ou ausente.
        '404':
          description: Usuário autenticado não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: Usuário autenticado não encontrado no banco de dados
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: Erro inesperado no servidor.

  /usuario/esqueciSenha:
    post:
      tags:
        - Usuário
      summary: Solicitar reset de senha
      description: Permite que um usuário solicite a redefinição de senha fornecendo seu e-mail.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: usuario@exemplo.com
            examples:
              emailExample:
                summary: Exemplo de requisição
                value:
                  email: usuario@exemplo.com
      responses:
        '200':
          description: Solicitação de reset de senha realizada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensagem:
                    type: string
                    example: Um e-mail de redefinição de senha foi enviado.
        '400':
          description: Erro na requisição
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: Formato de e-mail inválido ou ausente.

  /usuario/verificarCodigo:
     post:
      tags:
        - Usuário
      summary: Verificar código de reset de senha
      description: Verifica se o código de reset enviado pelo usuário é válido e não expirou.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - codigo
              properties:
                email:
                  type: string
                  format: email
                  example: usuario@exemplo.com
                codigo:
                  type: string
                  example: "123456"
            examples:
              exemploRequisicao:
                summary: Exemplo de requisição
                value:
                  email: usuario@exemplo.com
                  codigo: "123456"
      responses:
        '200':
          description: Código válido
          content:
            application/json:
              schema:
                type: object
                properties:
                  valido:
                    type: boolean
                    example: true
                  msg:
                    type: string
                    example: Código verificado com sucesso.
        '400':
          description: Código inválido ou expirado
          content:
            application/json:
              schema:
                type: object
                properties:
                  valido:
                    type: boolean
                    example: false
                  msg:
                    type: string
                    example: Código inválido ou expirado.

  /usuario/resetarSenha:
    post:
      tags:
        - Usuário
      summary: Redefinir senha
      description: Permite que um usuário redefina sua senha utilizando o e-mail, código de verificação e nova senha.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - codigo
                - nova_senha
              properties:
                email:
                  type: string
                  format: email
                  example: usuario@exemplo.com
                codigo:
                  type: string
                  example: "123456"
                nova_senha:
                  type: string
                  format: password
                  example: "NovaSenha123!"
            examples:
              exemploRequisicao:
                summary: Exemplo de requisição
                value:
                  email: usuario@exemplo.com
                  codigo: "123456"
                  nova_senha: "NovaSenha123!"
      responses:
        '200':
          description: Senha redefinida com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  sucesso:
                    type: boolean
                    example: true
                  msg:
                    type: string
                    example: Sua senha foi alterada com sucesso!
        '400':
          description: Erro ao redefinir a senha
          content:
            application/json:
              schema:
                type: object
                properties:
                  sucesso:
                    type: boolean
                    example: false
                  msg:
                    type: string
                    example: Todos os campos são obrigatórios.

  /usuario/MeuPerfil:
    get:
      tags:
        - Usuário
      summary: Retorna os dados do perfil do usuário logado
      description: >
        Retorna as informações do usuário autenticado, incluindo biografia, cidade, esportes praticados,
        eventos criados e participando, foto de perfil, pontos, seguidores e seguindo.
        Campos sensíveis como senha não são retornados.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Perfil do usuário retornado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  nome_completo:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                  biografia:
                    type: string
                  cidade:
                    type: string
                  estado:
                    type: string
                  data_nascimento:
                    type: string
                    format: date
                  data_criacao:
                    type: string
                    format: date-time
                  esportes_praticados:
                    type: object
                    additionalProperties:
                      type: string
                  eventos_criados:
                    type: array
                    items:
                      type: string
                  eventos_participando:
                    type: array
                    items:
                      type: string
                  post_criados:
                    type: array
                    items:
                      type: string
                  treinos_id:
                    type: array
                    items:
                      type: string
                  seguidores_count:
                    type: integer
                  seguindo_count:
                    type: integer
                  pontos:
                    type: number
                    format: float
                  status_usuario:
                    type: string
                  tipo_usuario:
                    type: string
                  total_posts:
                    type: integer
                  foto_perfil:
                    type: string
                    format: uri
              example:
                id: "6244f084-8cdd-4aa2-9a01-ddba2b898291"
                nome_completo: "Paulo"
                username: "paulopalauro"
                email: "paulopalauro@gmail.com"
                biografia: "Sou Paulo"
                cidade: "São Caetano do Sul"
                estado: "SP"
                data_nascimento: "2004-05-15"
                data_criacao: "2025-07-24T21:20:03.953271+00:00"
                esportes_praticados:
                  futsal: "profissional"
                  tênis: "amador"
                eventos_criados:
                  - "7d39af3e-2e44-4fed-8f37-57abc3f2b5dd"
                  - "f755195a-8cb2-434c-b4d3-c57a37a3470e"
                eventos_participando: []
                post_criados:
                  - "968975a1-1bd3-468b-ad8d-242c51354063"
                treinos_id:
                  - "99b16ceb-9266-4eba-9adb-63911faee01c"
                seguidores_count: 1
                seguindo_count: 1
                pontos: 1833.33
                status_usuario: "ativo"
                tipo_usuario: "comum"
                total_posts: 0
                foto_perfil: "https://storage.googleapis.com/safeviewbd.appspot.com/Usuarios/6244f084-8cdd-4aa2-9a01-ddba2b898291/Fotos/foto_perfil.jpg"
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Usuário não encontrado!"
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Ocorreu um erro interno ao processar seu perfil."

  /usuario/EditarUsuario:
    put:
      summary: Editar usuário autenticado
      description: |
        Atualiza os dados do usuário autenticado.  
        Campos aceitos:  
        - **username** (único)  
        - **email** (único)  
        - **senha** (armazenada com hash)  
        - **data_nascimento** (formato `YYYY-MM-DD`, mínimo 18 anos, ano ≥ 1900, não pode ser no futuro)  
        - **nome_completo**, **biografia**, **estado**, **cidade**  
        - **foto_perfil** (upload de imagem JPG/PNG, substitui a anterior)  
      tags:
        - Usuário
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: novo_usuario
                email:
                  type: string
                  format: email
                  example: usuario@email.com
                senha:
                  type: string
                  format: password
                  example: "novaSenha123"
                data_nascimento:
                  type: string
                  format: date
                  example: "2000-05-15"
                esportes_praticados:
                  type: string
                  description: JSON em formato de string representando esportes praticados.
                  example: '{"futebol": "Iniciante", "basquete": "profissional"}'
                nome_completo:
                  type: string
                  example: "João da Silva"
                biografia:
                  type: string
                  example: "Apaixonado por esportes e tecnologia."
                estado:
                  type: string
                  example: "SP"
                cidade:
                  type: string
                  example: "São Paulo"
                foto_perfil:
                  type: string
                  format: binary
                  description: Arquivo de imagem para foto de perfil
      responses:
        '200':
          description: Usuário atualizado com sucesso ou nenhuma alteração realizada
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensagem:
                    type: string
                    example: "Usuário atualizado com sucesso."
        '400':
          description: Erro de validação nos campos enviados
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "O usuário deve ter pelo menos 18 anos."
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Usuário não encontrado."
        '409':
          description: Conflito de dados (username ou email já existentes)
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "O username 'novo_usuario' já está em uso."
        '500':
          description: Erro interno no servidor ou ao acessar banco de dados
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Erro ao atualizar o usuário no banco de dados."

  /usuario/ExcluirUsuario:
    delete:
      summary: Excluir usuário autenticado
      description: |
        Remove permanentemente o perfil do usuário autenticado e todos os seus dados associados:  
        - Posts criados  
        - Eventos criados ou participados  
        - Treinos criados  
        - Relacionamentos (seguindo/seguidores)  
        - Arquivos armazenados no bucket  
      tags:
        - Usuário
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Usuário e dados excluídos com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensagem:
                    type: string
                    example: "Usuário e todos os dados associados foram excluídos com sucesso."
        '404':
          description: Usuário não encontrado para exclusão
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Usuário não encontrado para exclusão."
        '500':
          description: Erro interno ao excluir usuário
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Ocorreu um erro interno ao tentar excluir o usuário: erro_desconhecido"

  /usuario/{usuario_id}:
    get:
      summary: Visualizar perfil do usuário
      description: >
        Retorna os dados do perfil de um usuário específico.  
        Inclui informações básicas do usuário, total de posts, número de seguidores e número de pessoas que o usuário está seguindo.  
        Campos sensíveis como senha, lista completa de seguidores e seguindo não são retornados.
      tags:
        - Usuário
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: usuario_id
          required: true
          schema:
            type: string
          description: ID único do usuário no banco de dados.
      responses:
        '200':
          description: Perfil retornado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  nome:
                    type: string
                    example: "João Silva"
                  email:
                    type: string
                    example: "joao@email.com"
                  bio:
                    type: string
                    example: "Apaixonado por esportes e tecnologia."
                  total_posts:
                    type: integer
                    example: 12
                  seguidores_count:
                    type: integer
                    example: 150
                  seguindo_count:
                    type: integer
                    example: 80
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Usuário não encontrado!"
        '500':
          description: Erro interno no servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Ocorreu um erro interno ao processar o perfil."

# Esporte
 
  /esportes/ListarEsportes:
    get:
      tags:
        - Esporte
      summary: Listar todos os esportes
      responses:
        '200':
          description: Lista de esportes retornada com sucesso
        '500':
          description: Erro interno ao listar esportes

# Eventos
  /evento/AdicionarEvento:
   post:
    tags:
      - Eventos
    security:
        - bearerAuth: []
    summary: Adiciona um novo evento esportivo
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              titulo:
                type: string
                description: "Título do evento. Ex: 'Partida de futebol no parque'"
              descricao:
                type: string
                description: "Descrição do evento. Ex: 'Venha jogar uma partida amistosa no parque Ibirapuera.'"
              esporte_nome:
                type: string
                description: "Nome do esporte. Ex: 'Futebol'"
              data_hora_str:
                type: string
                description: "Data e hora do evento no formato 'YYYY-MM-DD HH:MM'. Ex: '2025-08-05 16:30'"
              localizacao:
                type: string
                description: "Local do evento. Ex: 'Parque Ibirapuera, São Paulo'"
              max_participantes:
                type: integer
                description: "Número máximo de participantes. Ex: 10"
              torneio:
                type: boolean
                description: "Indica se é um torneio. Ex: false"
              premiacao:
                type: string
                description: "Premiação do evento. Ex: 'Medalhas para os três primeiros colocados'"
              privado:
                type: boolean
                description: "Indica se o evento é privado. Ex: true"
              observacoes:
                type: string
                description: "Observações adicionais. Ex: 'Levar colete'"
              arquivo_foto:
                type: string
                format: binary
                description: "Imagem do evento (formato .jpg ou .png)"
            required:
              - titulo
              - descricao
              - esporte_nome
              - data_hora_str
              - localizacao
              - max_participantes
              - torneio
              - privado
        application/json:  # Apenas para exibição do exemplo na UI
          example:
            titulo: "Partida de futebol no parque"
            descricao: "Venha jogar uma partida amistosa no parque Ibirapuera."
            esporte_nome: "Futebol"
            data_hora_str: "2025-08-05 16:30"
            localizacao: "Parque Ibirapuera, São Paulo"
            max_participantes: 10
            torneio: false
            premiacao: "Medalhas para os três primeiros colocados"
            privado: true
            observacoes: "Levar colete"
    responses:
      '201':
        description: Evento criado com sucesso
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "evt_123abc"
                titulo:
                  type: string
                  example: "Partida de futebol no parque"
                descricao:
                  type: string
                  example: "Venha jogar uma partida amistosa no parque Ibirapuera."
                esporte_nome:
                  type: string
                  example: "Futebol"
                data_hora:
                  type: string
                  format: date-time
                  example: "2025-08-05T16:30:00Z"
                localizacao:
                  type: string
                  example: "Parque Ibirapuera, São Paulo"
                max_participantes:
                  type: integer
                  example: 10
                torneio:
                  type: boolean
                  example: false
                premiacao:
                  type: string
                  example: "Medalhas para os três primeiros colocados"
                privado:
                  type: boolean
                  example: true
                observacoes:
                  type: string
                  example: "Levar colete"
                imagem_url:
                  type: string
                  format: uri
                  example: "https://storage.googleapis.com/....."
      '400':
        description: Erro na requisição (campos inválidos ou obrigatórios não fornecidos)
        content:
          application/json:
            schema:
              type: object
              properties:
                erro:
                  type: string
                  example: "Todos os campos obrigatórios devem ser preenchidos."

  /evento/meusEventos:
   get:
    tags:
      - Eventos
    summary: Lista os eventos criados pelo usuário autenticado
    description: Retorna todos os eventos que foram criados pelo usuário logado (identificado via token).
    security:
      - bearerAuth: []  
    responses:
      '200':
        description: Lista de eventos do usuário
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    example: "evt_123abc"
                  titulo:
                    type: string
                    example: "Partida de futebol no parque"
                  descricao:
                    type: string
                    example: "Venha jogar uma partida amistosa no parque Ibirapuera."
                  esporte_nome:
                    type: string
                    example: "Futebol"
                  data_hora:
                    type: string
                    format: date-time
                    example: "2025-08-05T16:30:00Z"
                  localizacao:
                    type: string
                    example: "Parque Ibirapuera, São Paulo"
                  max_participantes:
                    type: integer
                    example: 10
                  torneio:
                    type: boolean
                    example: false
                  premiacao:
                    type: string
                    example: "Medalhas para os três primeiros colocados"
                  privado:
                    type: boolean
                    example: true
                  observacoes:
                    type: string
                    example: "Levar colete"
                  imagem_url:
                    type: string
                    format: uri
                    example: "https://meusite.com/imagens/eventos/evt_123abc.jpg"
      '401':
        description: Não autorizado – token ausente ou inválido
        content:
          application/json:
            schema:
              type: object
              properties:
                erro:
                  type: string
                  example: "Token de autenticação inválido ou ausente."

  /evento/editarEvento:
   put:
    tags:
      - Eventos
    summary: Edita um evento existente
    description: Permite que o usuário edite um evento que ele criou, enviando os novos dados via formulário e imagem opcional.
    security:
      - bearerAuth: []  
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              id:
                type: string
                description: "ID do evento a ser editado. Obrigatório."
                example: "evt_123abc"
              titulo:
                type: string
                description: "Novo título do evento"
                example: "Jogo de vôlei na praia"
              descricao:
                type: string
                description: "Nova descrição do evento"
                example: "Traga sua bola e venha jogar com a galera!"
              esporte_nome:
                type: string
                description: "Nome do esporte"
                example: "Vôlei"
              data_hora:
                type: string
                description: "Nova data e hora no formato 'YYYY-MM-DD HH:MM'"
                example: "2025-08-10 09:00"
              localizacao:
                type: string
                description: "Novo local do evento"
                example: "Praia de Copacabana, RJ"
              max_participantes:
                type: integer
                description: "Novo número máximo de participantes"
                example: 12
              torneio:
                type: boolean
                description: "Indica se é um torneio"
                example: false
              premiacao:
                type: string
                description: "Premiação (caso torneio)"
                example: "Camisas oficiais para os vencedores"
              privado:
                type: boolean
                description: "Indica se o evento é privado"
                example: true
              observacoes:
                type: string
                description: "Observações adicionais"
                example: "Tragam água"
              arquivo_foto:
                type: string
                format: binary
                description: "Imagem atualizada do evento (opcional)"
            required:
              - id
    responses:
      '200':
        description: Evento editado com sucesso
        content:
          application/json:
            schema:
              type: object
              properties:
                mensagem:
                  type: string
                  example: "Evento atualizado com sucesso."
                evento_id:
                  type: string
                  example: "evt_123abc"     
      '404':
        description: Evento não encontrado
        content:
          application/json:
            schema:
              type: object
              properties:
                erro:
                  type: string
                  example: "Evento não encontrado."  

      '400':
        description: "Requisição inválida (ex: ID ausente ou dados mal formatados)"
        content:
          application/json:
            schema:
              type: object
              properties:
                erro:
                  type: string
                  example: "O campo 'id' é obrigatório." 

  /evento/deletarEvento:
    delete:
      tags:
        - Eventos
      summary: Deleta um evento pelo ID
      description: Deleta o evento especificado pelo `evento_id` enviado no corpo da requisição JSON.
      security:
        - bearerAuth: [] 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                evento_id:
                  type: string
                  description: "ID do evento a ser deletado"
                  example: "evt_123abc"
              required:
                - evento_id
      responses:
        '200':
          description: Evento deletado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensagem:
                    type: string
                    example: "Evento deletado com sucesso."
                  evento_id:
                    type: string
                    example: "evt_123abc"
        '400':
          description: "Requisição inválida (ex: evento_id ausente)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "O campo 'evento_id' é obrigatório."
        '404':
          description: Evento não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Evento não encontrado."

  /evento/listarEventos:
    get:
      tags:
        - Eventos
      summary: Lista todos eventos.
      description: >
        Retorna uma lista de todos os eventos que o campo Torneio == False.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de eventos retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "a7b93e90-f5d6-4f0e-b5a0-8c34c77a9a00"
                    usuario_id:
                      type: string
                      example: "user_123"
                    titulo:
                      type: string
                      example: "Campeonato de Vôlei de Praia"
                    descricao:
                      type: string
                      example: "Torneio aberto para equipes amadoras."
                    esporte_nome:
                      type: string
                      example: "Vôlei de Praia"
                    localizacao:
                      type: string
                      example: "Praia de Copacabana, Rio de Janeiro"
                    data_hora:
                      type: string
                      format: date-time
                      example: "2025-08-10T14:30:00Z"
                    max_participantes:
                      type: integer
                      example: 16
                    data_criacao:
                      type: string
                      format: date-time
                      example: "2025-07-28T12:00:00Z"
                    torneio:
                      type: boolean
                      example: true
                    premiacao:
                      type: string
                      example: "Medalhas e troféu"
                    foto:
                      type: string
                      example: "https://firebasestorage.googleapis.com/v0/b/app-eventos/o/evento123.jpg"
                    participantes:
                      type: array
                      items:
                        type: string
                      example: ["user_123", "user_456", "user_789"]
                    privado:
                      type: boolean
                      example: false
                    observacoes:
                      type: string
                      example: "Chegar com 15 minutos de antecedência"
                    status:
                      type: string
                      example: "Inscricoes_abertas"
        '401':
          description: Token inválido ou ausente
        '500':
          description: Erro interno do servidor

  /evento/listarTorneios:
    get:
      tags:
        - Eventos
      summary: Lista os torneios 
      description: >
        Retorna uma lista de eventos que o campo "Torneio" == True.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de torneios retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "c9e6b114-baf6-4552-bb11-b60f4bbdd6fc"
                    usuario_id:
                      type: string
                      example: "user_456"
                    titulo:
                      type: string
                      example: "Torneio Municipal de Futebol"
                    descricao:
                      type: string
                      example: "Torneio anual de futebol amador com premiação em dinheiro."
                    esporte_nome:
                      type: string
                      example: "Futebol"
                    localizacao:
                      type: string
                      example: "Estádio Municipal de São Caetano"
                    data_hora:
                      type: string
                      format: date-time
                      example: "2025-09-05T10:00:00Z"
                    max_participantes:
                      type: integer
                      example: 20
                    data_criacao:
                      type: string
                      format: date-time
                      example: "2025-07-15T09:45:00Z"
                    torneio:
                      type: boolean
                      example: true
                    premiacao:
                      type: string
                      example: "R$ 5.000 + troféus"
                    foto:
                      type: string
                      example: "https://firebasestorage.googleapis.com/v0/b/app-eventos/o/torneio_fut.jpg"
                    participantes:
                      type: array
                      items:
                        type: string
                      example: ["user_111", "user_222", "user_333"]
                    privado:
                      type: boolean
                      example: false
                    observacoes:
                      type: string
                      example: "Levar chuteira e documento com foto"
                    status:
                      type: string
                      example: "ativo"
        '401':
          description: Token inválido ou ausente
        '500':
          description: Erro interno do servidor

  /evento/participarEvento:
    post:
      tags:
        - Eventos
      summary: Participa de um evento/torneio
      description: >
        Permite que um usuário autenticado participe de um evento, desde que:
        - Não seja o criador do evento;
        - Não esteja já participando;
        - Ainda haja vagas disponíveis.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - evento_id
              properties:
                evento_id:
                  type: string
                  description: ID do evento que o usuário deseja participar
                  example: "d2a6f3c9-8273-4f0f-9340-b8b123abc123"
      responses:
        '200':
          description: Participação confirmada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensagem:
                    type: string
                    example: "Participação confirmada com sucesso!"
        '400':
          description: Erro de validação (usuário já participa, é o criador ou evento está cheio)
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Você já está participando deste evento."
        '404':
          description: Evento não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Evento não encontrado."
        '500':
          description: Erro interno ao tentar participar do evento
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Erro ao participar do evento: erro inesperado."

  /evento/cancelarParticipacao:
    post:
      tags:
        - Eventos
      summary: Cancela a participação do usuário em um evento
      description: >
        Permite que um usuário autenticado cancele sua participação em um evento, desde que:
        - Ele esteja participando;
        - Ele **não** seja o criador do evento.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - evento_id
              properties:
                evento_id:
                  type: string
                  description: ID do evento do qual o usuário deseja sair
                  example: "c4e7d890-91ad-44c7-a1ef-fae8c7751e0f"
      responses:
        '200':
          description: Participação cancelada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensagem:
                    type: string
                    example: "Participação cancelada com sucesso."
        '400':
          description: Erro de validação (usuário não participa ou é o criador do evento)
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Você não está participando deste evento."
        '404':
          description: Evento não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Evento não encontrado."
        '500':
          description: Erro interno ao tentar cancelar a participação
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Erro ao cancelar participação: erro inesperado."

  /evento/usuario/{usuario_id}:
     get:
      summary: Listar eventos de um usuário
      description: >
        Retorna todos os eventos cadastrados por um usuário específico, com base no seu **usuario_id**.  
        Caso o usuário não tenha eventos, retorna uma mensagem informando.
      tags:
        - Eventos
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: usuario_id
          required: true
          schema:
            type: string
          description: ID único do usuário no banco de dados.
      responses:
        '200':
          description: Lista de eventos retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "abc123xyz"
                    titulo:
                      type: string
                      example: "Campeonato de Futebol"
                    descricao:
                      type: string
                      example: "Evento esportivo para amantes de futebol."
                    data:
                      type: string
                      format: date
                      example: "2025-09-15"
                    local:
                      type: string
                      example: "São Paulo - SP"
                    usuario_id:
                      type: string
                      example: "user_123"
        '404':
          description: Nenhum evento encontrado para este usuário
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensagem:
                    type: string
                    example: "Nenhum evento encontrado para este usuário."
        '500':
          description: Erro interno no servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Erro inesperado ao buscar eventos."

  /evento/participando:
    get:
      summary: Listar eventos que o usuário está participando
      description: Retorna todos os eventos ou torneios em que o usuário autenticado está participando.
      operationId: listarEventosParticipando
      tags:
        - Eventos
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista de eventos ou mensagem caso não esteja participando de nenhum.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      mensagem:
                        type: string
                        example: "Você não está participando de nenhum evento ou torneio."
                  - type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "evento123"
                        nome:
                          type: string
                          example: "Torneio de Futebol"
                        data:
                          type: string
                          format: date-time
                          example: "2025-09-30T18:00:00Z"
                        local:
                          type: string
                          example: "Estádio Municipal"
        "404":
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Usuário não encontrado."
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Erro ao listar eventos participando: <detalhes>"
  
# Posts 
  /postagem/ListarPostagens:
    get:
      summary: Listar postagens do usuário autenticado
      description: Retorna todas as postagens criadas pelo usuário autenticado via JWT.
      tags:
        - Posts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de postagens retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    descricao:
                      type: string
                      example: "Minha primeira postagem"
                    imagem_url:
                      type: string
                      example: "https://exemplo.com/imagem1.jpg"
        '401':
          description: Não autorizado - Token JWT ausente ou inválido
        '500':
          description: Erro interno do servidor

  /postagem/FeedSemFiltro:
    get:
      summary: Obter feed público de postagens (sem filtro)
      description: >
        Retorna as postagens públicas mais recentes, ordenadas por data de criação em ordem decrescente.
        Cada item da resposta contém os dados da postagem e as informações básicas do usuário autor. So mostra de quem voce não segue.
      tags:
        - Posts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de postagens retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    postagem:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "abc123"
                        descricao:
                          type: string
                          example: "Hoje foi um ótimo dia para jogar futebol!"
                        imagem_url:
                          type: string
                          example: "https://exemplo.com/imagem.jpg"
                        data_criacao:
                          type: string
                          format: date-time
                          example: "2025-06-09T14:23:00Z"
                        usuario_id:
                          type: string
                          example: "user456"
                    usuario:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "user456"
                        nome:
                          type: string
                          example: "João Silva"
                        username:
                          type: string
                          example: "joaosilva99"
                        foto_perfil:
                          type: string
                          example: "https://exemplo.com/foto.jpg"
        '401':
          description: Não autorizado - Token JWT ausente ou inválido
        '500':
          description: Erro interno do servidor

  /postagem/FeedSeguindo:
    get:
      summary: Retorna o feed de postagens dos usuários seguidos
      description: |
        Este endpoint retorna as últimas postagens feitas pelos usuários que o usuário logado está seguindo.  
        É necessário estar autenticado e fornecer o token JWT no header `Authorization`.
      tags:
        - Posts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista de postagens dos usuários seguidos
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    postagem:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "abc123"
                        usuario_id:
                          type: string
                          example: "user789"
                        conteudo:
                          type: string
                          example: "Hoje joguei futebol com os amigos!"
                        data_criacao:
                          type: string
                          format: date-time
                          example: "2025-09-16T14:30:00Z"
                    usuario:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "user789"
                        nome:
                          type: string
                          example: "Paulo Eduardo"
                        foto_perfil:
                          type: string
                          example: "https://meusite.com/fotos/perfil.png"
        "401":
          description: Token inválido ou ausente
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Token inválido ou expirado"
        "404":
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Usuário não encontrado"
        "500":
          description: Erro interno no servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Erro inesperado"
 
  /postagem/CriarPostagem:
    post:
      summary: Criar uma nova postagem
      description: Endpoint para criar uma nova postagem com descrição e imagem.
      tags:
        - Posts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                descricao:
                  type: string
                  description: Descrição da postagem
                imagem:
                  type: string
                  format: binary
                  description: Imagem da postagem
              required:
                - descricao
                - imagem
      responses:
        '201':
          description: Postagem criada com sucesso
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 123
                  descricao: "Exemplo de descrição"
                  imagem_url: "https://exemplo.com/imagem.jpg"
        '400':
          description: Requisição inválida
        '401':
          description: Não autorizado - Token JWT ausente ou inválido
        '500':
          description: Erro interno do servidor

  /postagem/EditarPostagem:
    put:
      summary: Editar uma postagem existente
      description: Edita os dados (descrição e/ou imagem) de uma postagem do usuário autenticado.
      tags:
        - Posts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                post_id:
                  type: string
                  description: ID da postagem a ser editada
                descricao:
                  type: string
                  description: Nova descrição da postagem (opcional)
                imagem:
                  type: string
                  format: binary
                  description: Nova imagem da postagem (opcional)
              required:
                - post_id
      responses:
        '200':
          description: Postagem editada com sucesso
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  descricao: "Descrição atualizada"
                  imagem_url: "https://exemplo.com/nova-imagem.jpg"
        '400':
          description: Requisição inválida - post_id não fornecido
        '401':
          description: Não autorizado - Token JWT ausente ou inválido
        '404':
          description: Postagem não encontrada
        '500':
          description: Erro interno do servidor   
                       
  /postagem/ExcluirPostagem:
    delete:
      summary: Excluir uma postagem
      description: Exclui uma postagem do usuário autenticado com base no ID fornecido.
      tags:
        - Posts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postagem_id:
                  type: integer
                  description: ID da postagem a ser excluída
              required:
                - postagem_id
      responses:
        '200':
          description: Postagem excluída com sucesso
          content:
            application/json:
              schema:
                type: object
                example:
                  mensagem: "Postagem excluída com sucesso."
        '400':
          description: Requisição inválida - ID da postagem não fornecido
        '401':
          description: Não autorizado - Token JWT ausente ou inválido
        '404':
          description: Postagem não encontrada
        '500':
          description: Erro interno do servidor
  
  /postagem/usuario/{usuario_id}:
    get:
      summary: Listar postagens de um usuário
      description: >
        Retorna todas as postagens de um usuário específico, ordenadas da mais recente para a mais antiga.  
        Cada postagem contém informações como ID, conteúdo, data de criação, entre outros.
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: usuario_id
          required: true
          schema:
            type: string
          description: ID único do usuário no banco de dados.
      responses:
        '200':
          description: Lista de postagens retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "post_123"
                    usuario_id:
                      type: string
                      example: "user_456"
                    conteudo:
                      type: string
                      example: "Hoje participei de um campeonato incrível!"
                    imagem_url:
                      type: string
                      nullable: true
                      example: "https://meuservidor.com/imagens/post123.jpg"
                    data_criacao:
                      type: string
                      format: date-time
                      example: "2025-09-01T14:30:00Z"
        '500':
          description: Erro interno ao buscar postagens
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensagem:
                    type: string
                    example: "Erro ao buscar postagens."
                  erro:
                    type: string
                    example: "Erro de conexão com o banco de dados."

# Treinos
  /treino/AdicionarTreino:
    post:
      tags:
        - Treino
      summary: Adiciona um novo treino
      description: Endpoint para criar um novo treino com informações como título, descrição, esporte, data, lugar, tempo treinado e uma imagem opcional. É necessário fornecer o token JWT no cabeçalho Authorization.
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                titulo:
                  type: string
                  description: Título do treino
                  example: Corrida Matinal
                descricao:
                  type: string
                  description: Descrição do treino
                  example: Corrida leve no parque
                nome_esporte:
                  type: string
                  description: Nome do esporte relacionado
                  example: Corrida
                data_hora_str:
                  type: string
                  description: Data e hora do treino no formato YYYY-MM-DD HH:MM
                  example: "2025-06-05 07:30"
                lugar:
                  type: string
                  description: Local onde o treino foi realizado
                  example: Parque Ibirapuera
                tempo_treinado:
                  type: number
                  description: Tempo treinado em horas
                  example: 1.5
                arquivo_imagem:
                  type: string
                  format: binary
                  description: Imagem opcional do treino
      responses:
        '200':
          description: Treino criado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: ID do treino
                    example: "12345"
                  titulo:
                    type: string
                  descricao:
                    type: string
                  nome_esporte:
                    type: string
                  data_hora:
                    type: string
                    format: date-time
                  lugar:
                    type: string
                  tempo_treinado:
                    type: number
                  imagem_url:
                    type: string
                    description: URL da imagem (se enviada)
        '400':
          description: Erro de validação dos dados
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Todos os campos obrigatórios devem ser preenchidos."

  /treino/ListarTreino:
    get:
      tags:
        - Treino
      summary: Lista treinos do usuário autenticado
      description: Retorna todos os treinos cadastrados para o usuário autenticado. É necessário fornecer o token JWT no cabeçalho Authorization.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de treinos retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: ID do treino
                      example: "12345"
                    titulo:
                      type: string
                      example: Corrida Matinal
                    descricao:
                      type: string
                      example: Corrida leve no parque
                    nome_esporte:
                      type: string
                      example: Corrida
                    data_hora:
                      type: string
                      format: date-time
                      example: "2025-06-05 07:30"
                    lugar:
                      type: string
                      example: Parque Ibirapuera
                    tempo_treinado:
                      type: number
                      example: 1.5
                    imagem_url:
                      type: string
                      description: URL da imagem associada (se houver)
                      example: "https://site.com/imagem123.jpg"
        '401':
          description: Não autorizado — token JWT inválido, expirado ou ausente
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Token inválido ou não fornecido"

  /treino/ExcluirTreino:
    delete:
      tags:
        - Treino
      summary: Exclui um treino do usuário
      description: Exclui um treino específico do usuário autenticado, com base no treino_id fornecido no corpo da requisição. É necessário fornecer o token JWT no cabeçalho Authorization.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                treino_id:
                  type: string
                  description: ID do treino a ser excluído
                  example: "12345"
              required:
                - treino_id
      responses:
        '200':
          description: Treino excluído com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensagem:
                    type: string
                    example: "Treino excluído com sucesso."
        '400':
          description: Erro na requisição — campo obrigatório ausente
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "O campo 'treino_id' é obrigatório."
        '401':
          description: Não autorizado — token JWT inválido, expirado ou ausente
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Token inválido ou não fornecido"

  /treino/AtualizarTreino:
    put:
      tags:
        - Treino
      summary: Atualiza um treino existente
      description: Atualiza os dados de um treino do usuário autenticado. Todos os campos são opcionais, exceto o treino_id, que é obrigatório. A imagem pode ser atualizada enviando um arquivo.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                treino_id:
                  type: string
                  description: ID do treino a ser atualizado
                  example: "12345"
                titulo:
                  type: string
                  description: Novo título do treino
                  example: Corrida Noturna
                descricao:
                  type: string
                  description: Nova descrição do treino
                  example: Corrida leve à noite
                nome_esporte:
                  type: string
                  description: Nome do esporte
                  example: Corrida
                data_hora_str:
                  type: string
                  description: Nova data e hora do treino (YYYY-MM-DD HH:MM)
                  example: "2025-06-05 20:00"
                lugar:
                  type: string
                  description: Novo local do treino
                  example: Parque da Cidade
                tempo_treinado:
                  type: number
                  description: Novo tempo treinado em horas
                  example: 1.2
                arquivo_imagem:
                  type: string
                  format: binary
                  description: Nova imagem do treino (opcional)
              required:
                - treino_id
      responses:
        '200':
          description: Treino atualizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensagem:
                    type: string
                    example: "Treino atualizado com sucesso."
                  treino:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "12345"
                      titulo:
                        type: string
                        example: Corrida Noturna
                      descricao:
                        type: string
                        example: Corrida leve à noite
                      nome_esporte:
                        type: string
                        example: Corrida
                      data_hora:
                        type: string
                        format: date-time
                        example: "2025-06-05 20:00"
                      lugar:
                        type: string
                        example: Parque da Cidade
                      tempo_treinado:
                        type: number
                        example: 1.2
                      imagem_url:
                        type: string
                        example: "https://site.com/imagem123.jpg"
        '400':
          description: Erro na requisição — treino_id ausente
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "O campo 'treino_id' é obrigatório."
        '401':
          description: Não autorizado — token JWT inválido, expirado ou ausente
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Token inválido ou não fornecido"

# Notificações
  /notificacao/MinhaNotificacoes:
    get:
      summary: Recupera as notificações do usuário logado
      description: Retorna todas as notificações destinadas ao usuário autenticado, ordenadas da mais recente para a mais antiga.
      tags:
        - Notificao
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de notificações recuperadas com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: ID único da notificação
                    usuario_destino_id:
                      type: string
                      description: ID do usuário que receberá a notificação
                    tipo:
                      type: string
                      description: Tipo da notificação (ex "seguindo", "evento")
                    referencia_id:
                      type: string
                      description: ID da referência relacionada à notificação
                    mensagem:
                      type: string
                      description: Mensagem da notificação
                    data_criacao:
                      type: string
                      format: date-time
                      description: Data e hora de criação da notificação
        '401':
          description: Usuário não autenticado
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Autenticação necessária"

  /notificacao/NotificacaoLida:
    put:
      summary: Marca uma notificação como lida
      description: Atualiza o status de uma notificação para "lida" para o usuário autenticado.
      tags:
        - Notificao
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notificacao_id:
                  type: string
                  description: ID da notificação que será marcada como lida
              required:
                - notificacao_id
            example:
              notificacao_id: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Notificação marcada como lida com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensagem:
                    type: string
                    example: "Notificação marcada como lida com sucesso."
        '400':
          description: Requisição inválida (campo obrigatório ausente)
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "O campo 'notificacao_id' é obrigatório"
        '403':
          description: Usuário não tem permissão para alterar essa notificação
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Você não tem permissão para alterar essa notificação."
        '404':
          description: Notificação não encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Notificação não encontrada."
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Erro ao marcar notificação como lida: mensagem de erro"  

  /notificacao/DeletarNotificacao:  
     delete:
      summary: Deleta uma notificação
      description: Remove uma notificação específica do usuário autenticado.
      tags:
        - Notificao
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notificacao_id:
                  type: string
                  description: ID da notificação que será deletada
              required:
                - notificacao_id
            example:
              notificacao_id: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Notificação deletada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensagem:
                    type: string
                    example: "Notificação deletada com sucesso."
        '403':
          description: Usuário não tem permissão para deletar a notificação
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Você não tem permissão para deletar esta notificação."
        '404':
          description: Notificação não encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Notificação não encontrada."
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  erro:
                    type: string
                    example: "Erro ao processar requisição: mensagem de erro"
                                

